{"contentType":"codeblock","contentSubtype":"rust","content":"fn main() {\n    let path = \"input.txt\";\n    let input = std::fs::read_to_string(path).expect(\u0026format!(\"Failed to open: {}\", path));\n    let (last_floor, basement_step) = analyze_input(\u0026input);\n\n    println!(\"With input: {}\", \u0026input[..]);\n    println!(\"Last floor reached: {}\", last_floor);\n    match basement_step {\n        Some(val) =\u003e println!(\"Step on which basement is reached (first time): {}\", val),\n        None =\u003e println!(\"Never reached the basement\"),\n    }\n}\n\nfn analyze_input(s: \u0026str) -\u003e (i32, Option\u003cusize\u003e) {\n    let mut count = 0;\n    let mut basement_step: Option\u003cusize\u003e = None;\n\n    for (i, byte) in s.chars().enumerate() {\n        match byte {\n            '(' =\u003e count += 1,\n            ')' =\u003e {\n                count -= 1;\n                if count \u003c 0 \u0026\u0026 basement_step == None {\n                    basement_step = Some(i + 1);\n                }\n            }\n            _ =\u003e (),\n        };\n    }\n    (count, basement_step)\n}\n\n"}
