{"contentType":"codeblock","contentSubtype":"golang", "metadata": {"source": "https://github.com/JoelAtDeluxe/AdventOfCode2016/tree/master/14"}, "content":"package main\n\nimport (\n\t\"crypto/md5\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\tlogic()\n}\n\ntype FoundHash struct {\n\tHash       string\n\tFoundIndex int\n}\n\nfunc logic() {\n\tsalt := \"ihaygndm\"\n\t// salt := \"abc\"\n\tpossibleHashes := make(map[rune][]FoundHash)\n\tknownKeys := make([]FoundHash, 0, 128)\n\n\ti := 0\n\tfor stop := false; !stop; i++ { // We probably should start at 0, but my guess is that likely 0 is not going to work anyway\n\t\ttoHashVal := fmt.Sprintf(\"%v%v\", salt, i)\n\t\t// hash := gimmeAHash(toHashVal)  // Part 1 solution\n\t\thash := stretchHash(toHashVal) // part 2 solution\n\t\tthreeMatch, fiveMatch := analyzeHash(hash)\n\n\t\tif len(fiveMatch) \u003e 0 {\n\t\t\tfor _, match := range fiveMatch {\n\t\t\t\tmatchingIndexes := possibleHashes[match]\n\t\t\t\tfor _, v := range matchingIndexes {\n\t\t\t\t\tif i-v.FoundIndex \u003c= 1000 {\n\t\t\t\t\t\tfmt.Printf(\"[%v] Adding hash as Key: %v (Found at: %v, verified at: %v with char: %v in %v)\\n\", len(knownKeys), v.Hash, v.FoundIndex, i, string(match), hash)\n\t\t\t\t\t\tknownKeys = append(knownKeys, v)\n\t\t\t\t\t\tif len(knownKeys) \u003e= 64 {\n\t\t\t\t\t\t\tstop = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpossibleHashes[match] = []FoundHash{}\n\t\t\t}\n\t\t}\n\t\tif threeMatch != '_' {\n\t\t\tpossibleHashes[threeMatch] = append(possibleHashes[threeMatch], FoundHash{hash, i})\n\t\t}\n\t}\n\n\tsort.Slice(knownKeys, func(i, j int) bool{ return knownKeys[i].FoundIndex \u003c knownKeys[j].FoundIndex})\n\n\tfmt.Println(\"All keys found by index: \", knownKeys[63].FoundIndex)\n}\n\nfunc analyzeHash(hash string) (rune, []rune) {\n\tthreeMatch := '_'\n\tfiveMatch := make([]rune, 0, 6)\n\n\tmatchedIndex := 0\n\n\tfor i, ch := range hash[1:] {\n\t\tchIndex := (i + 1)\n\t\tvar repCount int\n\t\tif ch == rune(hash[matchedIndex]) {\n\t\t\trepCount = (chIndex + 1) - matchedIndex\n\t\t} else {\n\t\t\tmatchedIndex = chIndex\n\t\t}\n\n\t\tif repCount == 3 \u0026\u0026 threeMatch == '_' {\n\t\t\tthreeMatch = ch\n\t\t}\n\t\tif repCount == 5 {\n\t\t\tfiveMatch = append(fiveMatch, ch)\n\t\t}\n\t}\n\n\treturn threeMatch, fiveMatch\n}\n\nfunc gimmeAHash(body string) string {\n\thash := md5.Sum([]byte(body))\n\n\trtn := hex.EncodeToString(hash[:])\n\treturn rtn\n}\n\nfunc stretchHash(body string) string {\n\tcopy := body\n\tfor i := 0; i \u003c 2017; i++ {\n\t\tcopy = gimmeAHash(copy)\n\t}\n\treturn copy\n}\n\n"}
